c
 auth_user(kind, @user)
@user.kind == kind
@user.kind
@user
c
role
@user
c
decoded_payload[0][:user_id]
decoded_payload[0]
payload[0]['user_id']
decoded_payload
request.headers['token']
@user
c
SECRET
c
SECRET
c
SECRET
c
SECRET
c
SECRET
c
SECRET
c
SECRET
id
c
SECRET
JWT
token
c
a
c
@user
a
a = JsonWebToken::Base.decode(token)
JsonWebToken::Base.decode(token)
token
c
request.headers['token']
decoded_payload
payload
c
payload
c
JsonWebToken::Base.decode(auth_token)
c
@user
c
auth_token
c
JsonWebToken::Base.decode(eyJhbGciOiJIUzI1NiJ9.eyJVc2VyX2lkIjoxfQ.Q9UFCj7iMVmizqeM6zVdZ8dActiAYLw6CMalAFTTNWQ)
JsonWebToken::Base.decode(auth_token)
decoded_payload
@user
c
request.headers['token']
request.headers
request
headers
headers['token']
@user
continue
byebug
continue
@user
continue
self
@product
continue
@user.password_digest
@user.name
@user?
@user
